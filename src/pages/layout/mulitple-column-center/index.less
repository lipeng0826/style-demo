@import '@/styles/common.less';

// 第一种方案
.multiple-column-center1 {
  display: grid;
  grid-gap: 12px;
  // 设置每个元素的最小，最大宽度
  grid-template-columns: repeat(auto-fill, minmax(268PX, 1fr));
  max-width: 1500px;
  margin: 0 auto;

  >.first-box-item {
    // 设置盒子的宽度为100%
    width: 100%;
  }
}

// 第二种方案
// 父元素
.multiple-column-center2 {
  display: flex;
  flex-flow: row wrap;
  align-content: flex-start;
}

// 子元素 根据屏幕宽度，设置不同的列数量
@media screen and (min-width: 1472px) {
  // 子盒子的容器，然后子盒子在里面居中对齐
  .box-item-wrapper {
    flex-basis: 25%; // 项目占据主轴空间，可以使用width的单位
    // 子盒子居中对齐
    >div {
      margin: 0 auto;
    }
  }
}

@media screen and (max-width: 1472px) {
  .box-item-wrapper {
    flex-basis: 33.3%; // 项目占据主轴空间，可以使用width的单位
  }
}

// 第三种方案
.multiple-column-center3 {
  display: grid;
  // justify-content: space-around; // 中间的间距比两边的间距大
  justify-content: space-between; // 使用这个，他们之间的间距是固定的，但是左右两边的没有边界
 }
 
   @media screen and (min-width: 1472px) {
    .multiple-column-center3 {
      grid-template-columns: 268px 268px 268px 268px; // 容器宽度，长了4列，也可以设置百分比，内部盒子居中
    }
  }
  @media screen and (max-width: 1472px) {
    .multiple-column-center3 {
      grid-template-columns: 268px 268px 268px; // 容器宽度，短了3列
    }
  }
